{"ast":null,"code":"// frontend/src/actions/auth.js\nimport axios from 'axios';\nimport { stopSubmit } from 'redux-form';\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, REGISTER_SUCCESS, // added\nREGISTER_FAIL, // added\nLOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS } from './types'; // LOGIN USER\n\nexport const login = ({\n  username,\n  password\n}) => async dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n\n  try {\n    const res = await axios.post('login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(stopSubmit('loginForm', err.response.data));\n  }\n}; // helper function\n\nexport const tokenConfig = getState => {\n  // Get token\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  return config;\n}; // REGISTER USER\n\nexport const register = ({\n  username,\n  email,\n  password\n}) => async dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch(stopSubmit('registerForm', err.response.data));\n  }\n};","map":{"version":3,"sources":["C:/Portal-Sportowy/src/backend/portalsport24/sport24/frontsport24/src/actions/auth.js"],"names":["axios","stopSubmit","USER_LOADING","USER_LOADED","AUTH_ERROR","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","login","username","password","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","err","response","tokenConfig","getState","token","auth","register","email"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,SACIC,YADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAIIC,gBAJJ,EAIsB;AAClBC,aALJ,EAKmB;AACfC,aANJ,EAOIC,UAPJ,EAQIC,cARJ,QASS,SATT,C,CAWE;;AACF,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4B,MAAMC,QAAN,IAAkB;AAC/D;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAF+D,CAQ/D;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMO,GAAG,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CAAW,OAAX,EAAoBJ,IAApB,EAA0BF,MAA1B,CAAlB;AACAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEd,aADC;AAEPe,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZX,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGAK,IAAAA,QAAQ,CAACZ,UAAU,CAAC,WAAD,EAAcuB,GAAG,CAACC,QAAJ,CAAaF,IAA3B,CAAX,CAAR;AACD;AACF,CAvBI,C,CAyBL;;AACA,OAAO,MAAMG,WAAW,GAAGC,QAAQ,IAAI;AACrC;AACA,QAAMC,KAAK,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,KAA9B,CAFqC,CAIrC;;AACA,QAAMd,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAIa,KAAJ,EAAW;AACTd,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAmC,SAAQa,KAAM,EAAjD;AACD;;AAED,SAAOd,MAAP;AACD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMgB,QAAQ,GAAG,CAAC;AAAEnB,EAAAA,QAAF;AAAYoB,EAAAA,KAAZ;AAAmBnB,EAAAA;AAAnB,CAAD,KAAmC,MAAMC,QAAN,IAAkB;AAC3E;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAF2E,CAQ3E;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,QAAF;AAAYoB,IAAAA,KAAZ;AAAmBnB,IAAAA;AAAnB,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMO,GAAG,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CAAW,UAAX,EAAuBJ,IAAvB,EAA6BF,MAA7B,CAAlB;AACAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEhB,gBADC;AAEPiB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZX,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR;AAGAO,IAAAA,QAAQ,CAACZ,UAAU,CAAC,cAAD,EAAiBuB,GAAG,CAACC,QAAJ,CAAaF,IAA9B,CAAX,CAAR;AACD;AACF,CAvBM","sourcesContent":["// frontend/src/actions/auth.js\r\n\r\nimport axios from 'axios';\r\nimport { stopSubmit } from 'redux-form';\r\n\r\nimport {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    REGISTER_SUCCESS, // added\r\n    REGISTER_FAIL, // added\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS\r\n  } from './types';\r\n  \r\n  // LOGIN USER\r\nexport const login = ({ username, password }) => async dispatch => {\r\n    // Headers\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n  \r\n    // Request Body\r\n    const body = JSON.stringify({ username, password });\r\n  \r\n    try {\r\n      const res = await axios.post('login', body, config);\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n      dispatch(stopSubmit('loginForm', err.response.data));\r\n    }\r\n  };\r\n  \r\n  // helper function\r\n  export const tokenConfig = getState => {\r\n    // Get token\r\n    const token = getState().auth.token;\r\n  \r\n    // Headers\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n  \r\n    if (token) {\r\n      config.headers['Authorization'] = `Token ${token}`;\r\n    }\r\n  \r\n    return config;\r\n  };\r\n\r\n  // REGISTER USER\r\n  export const register = ({ username, email, password }) => async dispatch => {\r\n    // Headers\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n  \r\n    // Request Body\r\n    const body = JSON.stringify({ username, email, password });\r\n  \r\n    try {\r\n      const res = await axios.post('register', body, config);\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n      dispatch(stopSubmit('registerForm', err.response.data));\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}